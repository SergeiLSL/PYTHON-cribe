"""
Операции со строками (свойства строк)
"""
"""
Строка представляет последовательность символов в кодировке Unicode, 
заключенных в кавычки. Причем в Python мы можем использовать как одинарные, 
так и двойные кавычки:
"""
name = "Tom"
surname = 'Smith'
print(name, surname)  # Tom Smith
"""
Одной из самых распространенных операций со строками является их 
объединение или конкатенация. Для объединения строк применяется знак плюса:
"""
name = "Tom"
surname = 'Smith'
fullname = name + " " + surname
print(fullname)  # Tom Smith
"""
С объединением двух строк все просто, но что, если нам надо сложить строку и число? 
В этом случае необходимо привести число к строке с помощью функции str():
"""
name = "Tom"
age = 33
info = "Name: " + name + " Age: " + str(age)
print(info)  # Name: Tom Age: 33
"""
Эскейп-последовательности
Кроме стандартных символов строки могут включать управляющие эскейп-последовательности, 
которые интерпретируются особым образом. Например, последовательность \n представляет 
перевод строки. Поэтому следующее выражение:
"""
print("Время пришло в гости отправится\nждет меня старинный друг")
# На консоль выведет две строки:
"""
Время пришло в гости отправится
ждет меня старинный друг
"""
"""
Тоже самое касается и последовательности \t, которая добавляет табуляцию.

Кроме того, существуют символы, которые вроде бы сложно использовать в строке. 
Например, кавычки. И чтобы отобразить кавычки (как двойные, так и одинарные) 
внутри строки, перед ними ставится слеш:
"""
print("Кафе \"Central Perk\"")  # Кафе "Central Perk"

"""
Сравнение строк

Особо следует сказать о сравнении строк. При сравнении строк принимается 
во внимание символы и их регистр. Так, цифровой символ условно меньше, 
чем любой алфавитный символ. Алфавитный символ в верхнем регистре условно меньше, 
чем алфавитные символы в нижнем регистре.
"""
# Например:
str1 = "1a"
str2 = "aa"
str3 = "Aa"
print(str1 > str2)  # False, так как первый символ в str1 - цифра
print(str2 > str3)  # True, так как первый символ в str2 - в нижнем регистре
"""
Поэтому строка "1a" условно меньше, чем строка "aa". Вначале сравнение идет 
по первому символу. Если начальные символы обоих строк представляют цифры, 
то меньшей считается меньшая цифра, например, "1a" меньше, чем "2a".

Если начальные символы представляют алфавитные символы в одном и том же регистре, 
то смотрят по алфавиту. Так, "aa" меньше, чем "ba", а "ba" меньше, чем "ca".

Если первые символы одинаковые, в расчет берутся вторые символы при их наличии.

Зависимость от регистра не всегда желательна, так как по сути мы имеем дело 
с одинаковыми строками. В этом случае перед сравнением мы можем привести 
обе строки к одному из регистров.

Функция lower() приводит строку к нижнему регистру, а функция upper() - к верхнему.
"""
str1 = "Tom"
str2 = "tom"
print(str1 == str2)  # False - строки не равны

print(str1.lower() == str2.lower())  # True
