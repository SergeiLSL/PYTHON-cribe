""" https://pythonru.com/osnovy/stroki-python  """
""" https://pythonru.com/primery/10-primerov-ispolzovanija-metodov-stok-v-python  """

# 1. S1 + S2 Конкатенация (сложение строк)
s1 = 'abc'
s2 = 'def'
s = s1 + s2
print(1, s)  # abcdef
# ===============================================
print()
# 2. S1 * 3 Повторение строки
s = 'asd'
print(2, s * 3)  # 2 asdasdasd
# ===============================================

# ===============================================

# ===============================================

# ===============================================
print()
# 6. S.find(str, [start],[end]) Поиск подстроки в строке.
# Возвращает номер первого вхождения или -1
"""
Метод find() возвращает наименьший индекс позиции, где указанная 
подстрока встречается в строке. Если она не найдена, возвращает -1.

Синтаксис
str.find(value, start, end), где:

value — подстрока, которую нужно искать в строке (обязательно);
start — начальный индекс строки, откуда нужно начинать поиск (необязательно);
end — конечный индекс строки, где поиск значения должен завершиться (необязательно);

Типы
rfind() — метод rfind() похож на find(), но он возвращает самый большой индекс.
"""
sentence = 'Она продает ракушки на берегу моря. Товары, которые она продает, безусловно, ракушки.'
print(6, sentence.find('ракушки'))  # 12
print(6, sentence.find('ракушки', 0, 9))  # -1
print(6, sentence.find('р', 5, 10))  # 5
print(7, sentence.rfind('ракушки'))  # 77

# ===============================================
print()
# 7. S.rfind(str, [start],[end]) Поиск подстроки в строке.
# Возвращает номер последнего вхождения или -1
print(7, sentence.rfind('ракушки'))  # 77

# ===============================================
print()
# 8. S.replace(шаблон, замена) Замена шаблона
S = 'asdfaff'
s = S.replace('f', '@')
print(8.1, s)  # asd@a@@
S = 'asdfafnof'
s = S.replace('f', '@', 2)
print(8.2, s)  # 8.2 asd@a@nof
S = 'as(dfa)ff'
s = S.replace('(', ' ').replace(')', ' ')
print(8.3, s)  # as dfa ff
# ===============================================
"""
S[i] Обращение по индексу

S[i:j:step] Извлечение среза

len(S) Длина строки

S.replace(шаблон, замена) Замена шаблона

S.split(символы) Разбиение строки по разделителю

S.isdigit() Состоит ли строка из цифр

S.isalpha() Состоит ли строка из букв

S.isalnum() Состоит ли строка из цифр или букв

S.upper() Преобразование строки к верхнему регистру

S.lower() Преобразование строки к нижнему регистру

S.startswith(str) Начинается ли строка S с шаблона str

S.endswith(str) Заканчивается ли строка S шаблоном str

ord(символ) Символ в его код ASCII

chr(число) Код ASCII в символ

S.capitalize() Переводит первый символ строки в верхний регистр,
а все остальные в нижний

S.swapcase() Переводит символы нижнего регистра в верхний,
а верхнего – в нижний

S.lstrip() Удаление пробельных символов в начале строки

S.rstrip() Удаление пробельных символов в конце строки

S.strip() Удаление пробельных символов в начале и в конце строки
"""
# ===============================================
print()
# 22. S.strip() Удаление пробельных символов в начале и в конце строки
"""
Метод strip() возвращает копию строки, в которой удалены определенные 
символы в начале и конце строки. Пробел — символ по умолчанию.

Синтаксис
string.strip(character)

Типы
rstrip() — убирает символы с правой части строки.
lstrip() — удаляет символы с левой стороны строки.
"""

string = '#.......Раздел 3.2.1 Вопрос #32......'
print(22, string.strip('.#!'))  # 'Раздел 3.2.1 Вопрос #32'
# str.rstrip
print(22, string.rstrip('.#!'))  # '#.......Раздел 3.2.1 Вопрос #32'
# str.lstrip
print(22, string.lstrip('.#!'))  # 'Раздел 3.2.1 Вопрос #32......'
# ===============================================
# ===============================================
print()
# 23. S.zfill() добавляет нули (0) в начале строки. Длина возвращаемой
# строки зависит от указанной ширины.
"""
Синтаксис
string.zfill(width)

width — определяет длину возвращаемой строки. Нули не добавляются, 
если параметр ширины меньше длины оригинальной строки.
"""
s = '7'
print(23, '7'.zfill(3))  # 007
print(23, '-21'.zfill(5))  # -0021
print(23, 'Python'.zfill(10))  # 0000Python
print(23, 'Python'.zfill(3))  # Python
