"""
Квадратичные сортировки

Чаще всего изучение алгоритмов начинается именно с объяснения
алгоритмов сортировки. Дональд Кнут посвятил третий том своего
фундаментального произведения сортировкам, сортировки пользуются
популярностью на собеседованиях, а также вселяют страх в
некоторых учеников. Обычно так получается, что это довольно
нудный материал, и трудно представить, что он пригодится в будущем,
в мире, где существуют такие замечательные вещи, как sorted(),
однако именно сортировки лучше всего помогают “прочувствовать” алгоритмы.
151, 386, 63, 147, 663, 988, 2, 35, 64, 88, 5265, 2362, 65, 66, 55, 765, 85, 12, 47
Сортировка выбором
"""
arr = [151, 386, 63, 147, 663, 988, 2, 35, 64, 88, 5265, 2362, 65, 66, 55, 765, 85, 12, 47]  # инициализация списка
for i in range(len(arr) - 1):
   idx = i
   for j in range(i + 1, len(arr)):
       if arr[j] < arr[idx]:
           idx = j
   arr[i], arr[idx] = arr[idx], arr[i]
print(arr)
"""

Сортировка вставками
"""
arr = [151, 386, 63, 147, 663, 988, 2, 35, 64, 88, 5265, 2362, 65, 66, 55, 765, 85, 12, 47]  # инициализация списка
for i in range(1, len(arr)):
   save = arr[i]
   j = i
   while j != 0 and arr[j - 1] > save:
       arr[j] = arr[j - 1]
       j -= 1
   arr[j] = save
print(arr)
"""

Сортировка пузырьком
"""
arr = [151, 386, 63, 147, 663, 988, 2, 35, 64, 88, 5265, 2362, 65, 66, 55, 765, 85, 12, 47]  # инициализация списка
j = len(arr) - 1
is_not_ordered = True
while is_not_ordered:
   is_not_ordered = False
   for i in range(j):
       if arr[i] > arr[i + 1]:
           arr[i], arr[i + 1] = arr[i + 1], arr[i]
           is_not_ordered = True
   j -= 1
print(arr)
"""
Эти сортировки имеют сложность O(n^2) из-за двойного цикла for.
Некоторые “интересности”:
Забавный пост о сортировках: https://habr.com/post/323188/
Сортировки наглядно: https://proglib.io/p/sort-algorithms/
Гифки :) : https://proglib.io/p/sort-gif/
Сортировки в танцах: 
https://www.youtube.com/playlist?list=PLuE79vNc5Wi6q34LsQcaJ7ISQ8uOyMaL_
Если вдруг вам нечем заняться: 
https://www.youtube.com/playlist?list=PLEJyjB1oGzx2h88Tj90B5_HadLq339Cso

Сортировка подсчетом
"""
# предположим, список состоит из положительных элементов

arr = [151, 386, 63, 147, 663, 988, 2, 35, 64, 88, 5265, 2362, 65, 66, 55, 765, 85, 12, 47]
max_elem = max(arr)
count = [0] * (max_elem + 1)
for elem in arr:
    count[elem] += 1
arr.clear()
for i in range(len(count)):
    arr += [i] * count[i]
print(arr)
"""
Данная сортировка имеет сложность O(n + k), где k — количество 
элементов в диапазоне чисел списка. По этой причине этот алгоритм 
наиболее эффективен в том случае, когда список состоит из большого 
количества чисел, однако все они принадлежат узкому диапазону. 
В таком случае сложность стремится к O(n).
"""