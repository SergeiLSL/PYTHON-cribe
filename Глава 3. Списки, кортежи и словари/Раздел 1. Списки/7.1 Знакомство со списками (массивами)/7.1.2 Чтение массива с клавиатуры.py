"""
Чтение массива с клавиатуры

Чаще всего массив будет подаваться на вход программы в виде набора данных.
Их надо уметь считывать.
Имеется два варианта, как могут поступать данные на вход  -
одной строкой или по одному данному в столбец. Разберёмся по порядку.

Данные массива подаются одной строкой через пробел:

Надо вспомнить, как мы считывали несколько данных, которые
подаются одной строкой через пробел:
"""
m, n = map(int, input().split())  # так считывают два целых числа,
# которые записаны в одной строке
"""
Теперь у нас будет больше данных в наборе. Слева мы напишем 
только одну переменную - имя массива, а справа обернём все 
эти функции ещё одной функцией - list. Это служебное слово 
из всех считанных данных организует нам список (мы его используем в режиме массива):
"""
A = list(map(int, input().split()))  # так записываем целые числа в массив А
B = list(map(float, input().split()))  # так записываем действительные числа в массив B
C = list(input().split())  # так получим массив строк
D = input().split()  # так умный Python тоже создаст массив строк, даже без list!
# считанная строка разобъётся по пробелам и запишется в массив D.
"""                    
Данные массива подаются по одному числу в строке, то есть в столбец:

В таком случае, когда данные подаются по одному в столбце, сначала, 
как правило, подают первое число - количество чисел, а потом сами числа. 

5    - количество чисел в наборе, обычно обозначают n
2.4  - далее сами числа в количестве n
2.7
4.2
1.3
4.6

Алгоритм чтения данных №1:
1) Считываем количество чисел в переменную n
2) Заводим пустой массив A = [ ]
3) Запускаем цикл на n повторений. Делаем n раз следующее: 
1. Читаем элемент 
2. Записываем его в конец массива. 
Команда, которая дописывает элемент x в конец массива выглядит так: A.append(x):
"""
n = int(input())  # читаем количество элементов в будущем массиве
A = []  # создали пустой массив (список)
for i in range(n):  # цикл на n повторений
    x = float(input())  # прочитали число действительного типа
    A.append(x)  # добавили число в конец массива (спискa)
"""     
В этот момент надо осознать, что списки в языке Python - 
динамическая структура. Мы можем добавлять в массив элементы 
в любом количестве.  Логично, что есть команды, которые позволяют 
убирать элементы из массива, хотя мы про них пока не знаем. 
Но интуиция должна подсказывать, что такие команды - есть))

Язык Python, подобно русскому языку, очень богат и многообразен! 
Есть ещё несколько способов чтения и генерации массивов. 
Но пока остановимся ещё на одном способе чтения. И если вы - новичок, 
то пока пользуйтесь этими способами. Потом будете двигаться дальше.

Алгоритм чтения данных №2:
1) Считываем количество чисел в переменную n
2) Заводим массив, состоящий из n нулей A = [0] *n
3) Запускаем цикл на n повторений. Делаем n раз следующее: 
1. Читаем элемент 
2. Записываем его в массив по своему адресу с помощью команды A[ i ] = x.
"""
n = int(input())  # читаем количество элементов в будущем массиве
A = [0] * n  # создали массив (список), состоящий из n нулей
for i in range(n):  # цикл на n повторений
    x = float(input())  # прочитали число действительного типа
    A[i] = x  # изменили нулевое значение массива на считанное
"""      
      
        Вывод массива

Мы уже разобрали два вида вывода массива. 
Но эти выводы не самые хорошие! Разберём универсальные выводы 
массивов. Массив надо уметь выводить в строку через пробел и 
в столбец. Пусть у нас есть какой-то массив в программе, будем его выводить:
"""
A = ["a", "b", "c", "d", "e"]
n = len(A)  # вычисляет длину массива (количество элементов)
# точно также, как длина строки!
"""                              
1) Вывод элементов массива одной строкой через пробел. 
В этом случае мы перебираем элементы массива с помощью индексов:
"""
for i in range(n):  # перебираем индексы массива
    print(A[i], end=" ")  # берём по очереди из массива A[0], A[1] и т.д и печатаем их
    # после напечатанного элемента ставим пробел
"""                               
2) Вывод элементов массива одной строкой через пробел. 
Перебираем напрямую элементы массива, не затрагивая индексы. 
Точно такой же приём работает для перебора элементов строки:
"""
for elem in A:  # переменной elem присваиваются по очереди элементы массива
    print(elem, end=" ")  # печатаем элемент за элементом,
    # после каждого элемента ставим пробел, с помощью параметра end=" "
"""                              
3) Вывод элементов массива по одному в столбик. Делаем всё тоже самое, 
только убираем из print параметр end. И теперь print будет действовать 
по умолчанию -  после печати переводить курсор на новую строку:

# Печать элементов массива в столбец. К элементам обращаемся по индексу
"""
for i in range(n):
    print(A[i])
# Печать элементов массива в столбец, перебираем сами элементы. Индексы не участвуют
for elem in A:
    print(elem)
